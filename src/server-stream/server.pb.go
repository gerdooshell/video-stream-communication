// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: src/server-stream/server.proto

package server_stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       int64                  `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	ImageFormat     string                 `protobuf:"bytes,2,opt,name=imageFormat,proto3" json:"imageFormat,omitempty"`
	Resolution      int32                  `protobuf:"varint,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
	StartTime       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	IsFrequencyAuto bool                   `protobuf:"varint,5,opt,name=isFrequencyAuto,proto3" json:"isFrequencyAuto,omitempty"`
}

func (x *VideoConfig) Reset() {
	*x = VideoConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_server_stream_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoConfig) ProtoMessage() {}

func (x *VideoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_src_server_stream_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoConfig.ProtoReflect.Descriptor instead.
func (*VideoConfig) Descriptor() ([]byte, []int) {
	return file_src_server_stream_server_proto_rawDescGZIP(), []int{0}
}

func (x *VideoConfig) GetRequestId() int64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *VideoConfig) GetImageFormat() string {
	if x != nil {
		return x.ImageFormat
	}
	return ""
}

func (x *VideoConfig) GetResolution() int32 {
	if x != nil {
		return x.Resolution
	}
	return 0
}

func (x *VideoConfig) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *VideoConfig) GetIsFrequencyAuto() bool {
	if x != nil {
		return x.IsFrequencyAuto
	}
	return false
}

type VideoFrameLive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image    []byte         `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	MetaData *FrameMetaData `protobuf:"bytes,2,opt,name=metaData,proto3" json:"metaData,omitempty"`
}

func (x *VideoFrameLive) Reset() {
	*x = VideoFrameLive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_server_stream_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoFrameLive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoFrameLive) ProtoMessage() {}

func (x *VideoFrameLive) ProtoReflect() protoreflect.Message {
	mi := &file_src_server_stream_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoFrameLive.ProtoReflect.Descriptor instead.
func (*VideoFrameLive) Descriptor() ([]byte, []int) {
	return file_src_server_stream_server_proto_rawDescGZIP(), []int{1}
}

func (x *VideoFrameLive) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *VideoFrameLive) GetMetaData() *FrameMetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type FrameMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frequency        int32                  `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Timestamp        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IsMotionDetected bool                   `protobuf:"varint,3,opt,name=isMotionDetected,proto3" json:"isMotionDetected,omitempty"`
}

func (x *FrameMetaData) Reset() {
	*x = FrameMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_server_stream_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameMetaData) ProtoMessage() {}

func (x *FrameMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_src_server_stream_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameMetaData.ProtoReflect.Descriptor instead.
func (*FrameMetaData) Descriptor() ([]byte, []int) {
	return file_src_server_stream_server_proto_rawDescGZIP(), []int{2}
}

func (x *FrameMetaData) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *FrameMetaData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *FrameMetaData) GetIsMotionDetected() bool {
	if x != nil {
		return x.IsMotionDetected
	}
	return false
}

var File_src_server_stream_server_proto protoreflect.FileDescriptor

var file_src_server_stream_server_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x72, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd1, 0x01, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69,
	0x73, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x41, 0x75, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x93, 0x01, 0x0a, 0x0d, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x32,
	0x46, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x0c, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x0f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x13, 0x5a, 0x11, 0x73, 0x72, 0x63, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_server_stream_server_proto_rawDescOnce sync.Once
	file_src_server_stream_server_proto_rawDescData = file_src_server_stream_server_proto_rawDesc
)

func file_src_server_stream_server_proto_rawDescGZIP() []byte {
	file_src_server_stream_server_proto_rawDescOnce.Do(func() {
		file_src_server_stream_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_server_stream_server_proto_rawDescData)
	})
	return file_src_server_stream_server_proto_rawDescData
}

var file_src_server_stream_server_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_src_server_stream_server_proto_goTypes = []interface{}{
	(*VideoConfig)(nil),           // 0: VideoConfig
	(*VideoFrameLive)(nil),        // 1: VideoFrameLive
	(*FrameMetaData)(nil),         // 2: FrameMetaData
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_src_server_stream_server_proto_depIdxs = []int32{
	3, // 0: VideoConfig.startTime:type_name -> google.protobuf.Timestamp
	2, // 1: VideoFrameLive.metaData:type_name -> FrameMetaData
	3, // 2: FrameMetaData.timestamp:type_name -> google.protobuf.Timestamp
	0, // 3: VideoLiveRequesting.download:input_type -> VideoConfig
	1, // 4: VideoLiveRequesting.download:output_type -> VideoFrameLive
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_src_server_stream_server_proto_init() }
func file_src_server_stream_server_proto_init() {
	if File_src_server_stream_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_server_stream_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_server_stream_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoFrameLive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_server_stream_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_server_stream_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_src_server_stream_server_proto_goTypes,
		DependencyIndexes: file_src_server_stream_server_proto_depIdxs,
		MessageInfos:      file_src_server_stream_server_proto_msgTypes,
	}.Build()
	File_src_server_stream_server_proto = out.File
	file_src_server_stream_server_proto_rawDesc = nil
	file_src_server_stream_server_proto_goTypes = nil
	file_src_server_stream_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VideoLiveRequestingClient is the client API for VideoLiveRequesting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VideoLiveRequestingClient interface {
	Download(ctx context.Context, opts ...grpc.CallOption) (VideoLiveRequesting_DownloadClient, error)
}

type videoLiveRequestingClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoLiveRequestingClient(cc grpc.ClientConnInterface) VideoLiveRequestingClient {
	return &videoLiveRequestingClient{cc}
}

func (c *videoLiveRequestingClient) Download(ctx context.Context, opts ...grpc.CallOption) (VideoLiveRequesting_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VideoLiveRequesting_serviceDesc.Streams[0], "/VideoLiveRequesting/download", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoLiveRequestingDownloadClient{stream}
	return x, nil
}

type VideoLiveRequesting_DownloadClient interface {
	Send(*VideoConfig) error
	Recv() (*VideoFrameLive, error)
	grpc.ClientStream
}

type videoLiveRequestingDownloadClient struct {
	grpc.ClientStream
}

func (x *videoLiveRequestingDownloadClient) Send(m *VideoConfig) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoLiveRequestingDownloadClient) Recv() (*VideoFrameLive, error) {
	m := new(VideoFrameLive)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoLiveRequestingServer is the server API for VideoLiveRequesting service.
type VideoLiveRequestingServer interface {
	Download(VideoLiveRequesting_DownloadServer) error
}

// UnimplementedVideoLiveRequestingServer can be embedded to have forward compatible implementations.
type UnimplementedVideoLiveRequestingServer struct {
}

func (*UnimplementedVideoLiveRequestingServer) Download(VideoLiveRequesting_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}

func RegisterVideoLiveRequestingServer(s *grpc.Server, srv VideoLiveRequestingServer) {
	s.RegisterService(&_VideoLiveRequesting_serviceDesc, srv)
}

func _VideoLiveRequesting_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoLiveRequestingServer).Download(&videoLiveRequestingDownloadServer{stream})
}

type VideoLiveRequesting_DownloadServer interface {
	Send(*VideoFrameLive) error
	Recv() (*VideoConfig, error)
	grpc.ServerStream
}

type videoLiveRequestingDownloadServer struct {
	grpc.ServerStream
}

func (x *videoLiveRequestingDownloadServer) Send(m *VideoFrameLive) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoLiveRequestingDownloadServer) Recv() (*VideoConfig, error) {
	m := new(VideoConfig)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _VideoLiveRequesting_serviceDesc = grpc.ServiceDesc{
	ServiceName: "VideoLiveRequesting",
	HandlerType: (*VideoLiveRequestingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "download",
			Handler:       _VideoLiveRequesting_Download_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/server-stream/server.proto",
}
