// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: src/server-stream/server.proto

package server_stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	ImageFormat string `protobuf:"bytes,2,opt,name=imageFormat,proto3" json:"imageFormat,omitempty"`
	Resolution  int32  `protobuf:"varint,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// Types that are assignable to StartTime:
	//
	//	*VideoConfig_Seconds
	//	*VideoConfig_Timestamp
	StartTime isVideoConfig_StartTime `protobuf_oneof:"startTime"`
}

func (x *VideoConfig) Reset() {
	*x = VideoConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_server_stream_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoConfig) ProtoMessage() {}

func (x *VideoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_src_server_stream_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoConfig.ProtoReflect.Descriptor instead.
func (*VideoConfig) Descriptor() ([]byte, []int) {
	return file_src_server_stream_server_proto_rawDescGZIP(), []int{0}
}

func (x *VideoConfig) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *VideoConfig) GetImageFormat() string {
	if x != nil {
		return x.ImageFormat
	}
	return ""
}

func (x *VideoConfig) GetResolution() int32 {
	if x != nil {
		return x.Resolution
	}
	return 0
}

func (m *VideoConfig) GetStartTime() isVideoConfig_StartTime {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (x *VideoConfig) GetSeconds() int32 {
	if x, ok := x.GetStartTime().(*VideoConfig_Seconds); ok {
		return x.Seconds
	}
	return 0
}

func (x *VideoConfig) GetTimestamp() *timestamppb.Timestamp {
	if x, ok := x.GetStartTime().(*VideoConfig_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

type isVideoConfig_StartTime interface {
	isVideoConfig_StartTime()
}

type VideoConfig_Seconds struct {
	Seconds int32 `protobuf:"varint,4,opt,name=seconds,proto3,oneof"`
}

type VideoConfig_Timestamp struct {
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3,oneof"`
}

func (*VideoConfig_Seconds) isVideoConfig_StartTime() {}

func (*VideoConfig_Timestamp) isVideoConfig_StartTime() {}

type VideoFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image    []byte         `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	MetaData *FrameMetaData `protobuf:"bytes,2,opt,name=metaData,proto3" json:"metaData,omitempty"`
}

func (x *VideoFrame) Reset() {
	*x = VideoFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_server_stream_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoFrame) ProtoMessage() {}

func (x *VideoFrame) ProtoReflect() protoreflect.Message {
	mi := &file_src_server_stream_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoFrame.ProtoReflect.Descriptor instead.
func (*VideoFrame) Descriptor() ([]byte, []int) {
	return file_src_server_stream_server_proto_rawDescGZIP(), []int{1}
}

func (x *VideoFrame) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *VideoFrame) GetMetaData() *FrameMetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type FrameMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frequency int32 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Types that are assignable to Tick:
	//
	//	*FrameMetaData_Moment
	//	*FrameMetaData_Timestamp
	Tick isFrameMetaData_Tick `protobuf_oneof:"tick"`
}

func (x *FrameMetaData) Reset() {
	*x = FrameMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_server_stream_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameMetaData) ProtoMessage() {}

func (x *FrameMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_src_server_stream_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameMetaData.ProtoReflect.Descriptor instead.
func (*FrameMetaData) Descriptor() ([]byte, []int) {
	return file_src_server_stream_server_proto_rawDescGZIP(), []int{2}
}

func (x *FrameMetaData) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (m *FrameMetaData) GetTick() isFrameMetaData_Tick {
	if m != nil {
		return m.Tick
	}
	return nil
}

func (x *FrameMetaData) GetMoment() []byte {
	if x, ok := x.GetTick().(*FrameMetaData_Moment); ok {
		return x.Moment
	}
	return nil
}

func (x *FrameMetaData) GetTimestamp() *timestamppb.Timestamp {
	if x, ok := x.GetTick().(*FrameMetaData_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

type isFrameMetaData_Tick interface {
	isFrameMetaData_Tick()
}

type FrameMetaData_Moment struct {
	Moment []byte `protobuf:"bytes,2,opt,name=moment,proto3,oneof"`
}

type FrameMetaData_Timestamp struct {
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3,oneof"`
}

func (*FrameMetaData_Moment) isFrameMetaData_Tick() {}

func (*FrameMetaData_Timestamp) isFrameMetaData_Tick() {}

var File_src_server_stream_server_proto protoreflect.FileDescriptor

var file_src_server_stream_server_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x72, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2,
	0x01, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x06, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x69, 0x63,
	0x6b, 0x32, 0x43, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0b, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x32, 0x3e, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0c, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x0b, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x13, 0x5a, 0x11, 0x73, 0x72, 0x63, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_src_server_stream_server_proto_rawDescOnce sync.Once
	file_src_server_stream_server_proto_rawDescData = file_src_server_stream_server_proto_rawDesc
)

func file_src_server_stream_server_proto_rawDescGZIP() []byte {
	file_src_server_stream_server_proto_rawDescOnce.Do(func() {
		file_src_server_stream_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_server_stream_server_proto_rawDescData)
	})
	return file_src_server_stream_server_proto_rawDescData
}

var file_src_server_stream_server_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_src_server_stream_server_proto_goTypes = []interface{}{
	(*VideoConfig)(nil),           // 0: VideoConfig
	(*VideoFrame)(nil),            // 1: VideoFrame
	(*FrameMetaData)(nil),         // 2: FrameMetaData
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 4: google.protobuf.Empty
}
var file_src_server_stream_server_proto_depIdxs = []int32{
	3, // 0: VideoConfig.timestamp:type_name -> google.protobuf.Timestamp
	2, // 1: VideoFrame.metaData:type_name -> FrameMetaData
	3, // 2: FrameMetaData.timestamp:type_name -> google.protobuf.Timestamp
	1, // 3: VideoStreaming.upload:input_type -> VideoFrame
	0, // 4: VideoRequesting.download:input_type -> VideoConfig
	4, // 5: VideoStreaming.upload:output_type -> google.protobuf.Empty
	1, // 6: VideoRequesting.download:output_type -> VideoFrame
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_src_server_stream_server_proto_init() }
func file_src_server_stream_server_proto_init() {
	if File_src_server_stream_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_server_stream_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_server_stream_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_server_stream_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_src_server_stream_server_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*VideoConfig_Seconds)(nil),
		(*VideoConfig_Timestamp)(nil),
	}
	file_src_server_stream_server_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*FrameMetaData_Moment)(nil),
		(*FrameMetaData_Timestamp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_server_stream_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_src_server_stream_server_proto_goTypes,
		DependencyIndexes: file_src_server_stream_server_proto_depIdxs,
		MessageInfos:      file_src_server_stream_server_proto_msgTypes,
	}.Build()
	File_src_server_stream_server_proto = out.File
	file_src_server_stream_server_proto_rawDesc = nil
	file_src_server_stream_server_proto_goTypes = nil
	file_src_server_stream_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VideoStreamingClient is the client API for VideoStreaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VideoStreamingClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (VideoStreaming_UploadClient, error)
}

type videoStreamingClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoStreamingClient(cc grpc.ClientConnInterface) VideoStreamingClient {
	return &videoStreamingClient{cc}
}

func (c *videoStreamingClient) Upload(ctx context.Context, opts ...grpc.CallOption) (VideoStreaming_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VideoStreaming_serviceDesc.Streams[0], "/VideoStreaming/upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoStreamingUploadClient{stream}
	return x, nil
}

type VideoStreaming_UploadClient interface {
	Send(*VideoFrame) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type videoStreamingUploadClient struct {
	grpc.ClientStream
}

func (x *videoStreamingUploadClient) Send(m *VideoFrame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoStreamingUploadClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoStreamingServer is the server API for VideoStreaming service.
type VideoStreamingServer interface {
	Upload(VideoStreaming_UploadServer) error
}

// UnimplementedVideoStreamingServer can be embedded to have forward compatible implementations.
type UnimplementedVideoStreamingServer struct {
}

func (*UnimplementedVideoStreamingServer) Upload(VideoStreaming_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}

func RegisterVideoStreamingServer(s *grpc.Server, srv VideoStreamingServer) {
	s.RegisterService(&_VideoStreaming_serviceDesc, srv)
}

func _VideoStreaming_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoStreamingServer).Upload(&videoStreamingUploadServer{stream})
}

type VideoStreaming_UploadServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*VideoFrame, error)
	grpc.ServerStream
}

type videoStreamingUploadServer struct {
	grpc.ServerStream
}

func (x *videoStreamingUploadServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoStreamingUploadServer) Recv() (*VideoFrame, error) {
	m := new(VideoFrame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _VideoStreaming_serviceDesc = grpc.ServiceDesc{
	ServiceName: "VideoStreaming",
	HandlerType: (*VideoStreamingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "upload",
			Handler:       _VideoStreaming_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "src/server-stream/server.proto",
}

// VideoRequestingClient is the client API for VideoRequesting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VideoRequestingClient interface {
	Download(ctx context.Context, opts ...grpc.CallOption) (VideoRequesting_DownloadClient, error)
}

type videoRequestingClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoRequestingClient(cc grpc.ClientConnInterface) VideoRequestingClient {
	return &videoRequestingClient{cc}
}

func (c *videoRequestingClient) Download(ctx context.Context, opts ...grpc.CallOption) (VideoRequesting_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VideoRequesting_serviceDesc.Streams[0], "/VideoRequesting/download", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoRequestingDownloadClient{stream}
	return x, nil
}

type VideoRequesting_DownloadClient interface {
	Send(*VideoConfig) error
	Recv() (*VideoFrame, error)
	grpc.ClientStream
}

type videoRequestingDownloadClient struct {
	grpc.ClientStream
}

func (x *videoRequestingDownloadClient) Send(m *VideoConfig) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoRequestingDownloadClient) Recv() (*VideoFrame, error) {
	m := new(VideoFrame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoRequestingServer is the server API for VideoRequesting service.
type VideoRequestingServer interface {
	Download(VideoRequesting_DownloadServer) error
}

// UnimplementedVideoRequestingServer can be embedded to have forward compatible implementations.
type UnimplementedVideoRequestingServer struct {
}

func (*UnimplementedVideoRequestingServer) Download(VideoRequesting_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}

func RegisterVideoRequestingServer(s *grpc.Server, srv VideoRequestingServer) {
	s.RegisterService(&_VideoRequesting_serviceDesc, srv)
}

func _VideoRequesting_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoRequestingServer).Download(&videoRequestingDownloadServer{stream})
}

type VideoRequesting_DownloadServer interface {
	Send(*VideoFrame) error
	Recv() (*VideoConfig, error)
	grpc.ServerStream
}

type videoRequestingDownloadServer struct {
	grpc.ServerStream
}

func (x *videoRequestingDownloadServer) Send(m *VideoFrame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoRequestingDownloadServer) Recv() (*VideoConfig, error) {
	m := new(VideoConfig)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _VideoRequesting_serviceDesc = grpc.ServiceDesc{
	ServiceName: "VideoRequesting",
	HandlerType: (*VideoRequestingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "download",
			Handler:       _VideoRequesting_Download_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/server-stream/server.proto",
}
